import os
import logging
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, F, html
from aiogram.enums import ParseMode, ChatAction
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, FSInputFile
from aiogram.utils.markdown import bold, italic
from dotenv import load_dotenv
from datetime import datetime, timedelta
from collections import defaultdict
from typing import List, Dict, Any, Optional
from aiohttp import web
import random

# –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEYS = [key.strip() for key in os.getenv("API_KEYS", "").split(",") if key.strip()]
OWNER_ID = int(os.getenv("OWNER_ID", 9995599))
OWNER_USERNAME = os.getenv("OWNER_USERNAME", "qqq5599")
MAX_TOKENS = 2000
DAILY_LIMIT = 10

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
user_histories = defaultdict(list)
user_limits = defaultdict(lambda: {"count": 0, "last_reset": datetime.utcnow()})
user_last_messages = defaultdict(str)
user_stats = defaultdict(lambda: {"total_requests": 0, "last_active": None})

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç"), KeyboardButton(text="–°–¥–µ–ª–∞–π –º–æ—Ç–∏–≤–∞—Ü–∏—é")],
        [KeyboardButton(text="–ü–æ–º–æ–≥–∏ —Å –∏–¥–µ—è–º–∏"), KeyboardButton(text="–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é")],
        [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="–ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
)

async def generate_response(messages: List[Dict[str, Any]]) -> Optional[str]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter"""
    for key in random.sample(API_KEYS, len(API_KEYS)):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers={
                        "Authorization": f"Bearer {key}",
                        "Content-Type": "application/json",
                        "HTTP-Referer": "https://github.com/your-repo",
                    },
                    json={
                        "model": "gpt-3.5-turbo",
                        "messages": messages,
                        "max_tokens": MAX_TOKENS,
                        "temperature": 0.7,
                    },
                    timeout=45
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data['choices'][0]['message']['content']
                    elif response.status == 429:
                        logging.warning(f"Key {key[-5:]} rate limited")
                    else:
                        logging.error(f"API error {response.status} with key {key[-5:]}")
        except Exception as e:
            logging.error(f"Connection error: {str(e)}")
    return None

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# 25 –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —É–ª—É—á—à–µ–Ω–∏–π:

1. –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
@dp.message(F.text)
async def throttle_message(message: Message):
    user_id = message.from_user.id
    last_message = user_stats[user_id].get("last_message")
    if last_message and (datetime.now() - last_message).seconds < 2:
        await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã.")
        return
    user_stats[user_id]["last_message"] = datetime.now()
    
2. –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(Command("stats"))
async def send_stats(message: Message):
    user_id = message.from_user.id
    stats = user_stats[user_id]
    text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['last_active'].strftime('%d.%m.%Y %H:%M') if stats['last_active'] else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
    )
    await message.answer(text)

3. –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
async def backup_history():
    while True:
        await asyncio.sleep(3600)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª/–ë–î
        logging.info("History backup completed")

4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def notify_admin(text: str):
    await bot.send_message(OWNER_ID, f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {text}")

5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, exception):
    await notify_admin(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {str(exception)}")
    return True

6. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
def log_activity(user_id: int, action: str):
    logging.info(f"User {user_id} performed: {action}")

7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
def count_tokens(text: str) -> int:
    return len(text.split()) // 0.75

8. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∏—Å—Ç–æ—Ä–∏–∏
def trim_history(history: list) -> list:
    total = sum(len(m['content']) for m in history)
    while total > 4000:
        removed = history.pop(0)
        total -= len(removed['content'])
    return history

9. –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
def calculate_level(requests: int) -> int:
    return min(requests // 50 + 1, 10)

10. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
def clean_response(text: str) -> str:
    return text.replace("**", "*").strip()

11. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
def generate_request_id(user_id: int) -> str:
    timestamp = int(datetime.now().timestamp())
    return f"{user_id}_{timestamp}"

12. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
ALLOWED_TYPES = ['text/plain', 'application/pdf']
MAX_FILE_SIZE = 5 * 1024 * 1024  # 5MB

async def validate_file(file) -> bool:
    if file.file_size > MAX_FILE_SIZE:
        return False
    if file.mime_type not in ALLOWED_TYPES:
        return False
    return True

13. –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
user_ratings = defaultdict(int)

@dp.message(F.text.startswith("–û—Ü–µ–Ω–∫–∞"))
async def rate_response(message: Message):
    try:
        _, rating = message.text.split()
        rating = int(rating)
        if 1 <= rating <= 5:
            user_ratings[message.from_user.id] += rating
            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")
    except:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –û—Ü–µ–Ω–∫–∞ [1-5]")

14. –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
CUSTOM_COMMANDS = {
    "–∞–Ω–µ–∫–¥–æ—Ç": "–†–∞—Å—Å–∫–∞–∂–∏ —Å–≤–µ–∂–∏–π –∞–Ω–µ–∫–¥–æ—Ç –ø—Ä–æ IT",
    "–º–æ—Ç–∏–≤–∞—Ü–∏—è": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    "–∏–¥–µ—è": "–ü—Ä–µ–¥–ª–æ–∂–∏ 5 –∏–¥–µ–π –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞"
}

15. –ê–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
async def clean_inactive_users():
    while True:
        await asyncio.sleep(86400)
        cutoff = datetime.now() - timedelta(days=30)
        for user_id in list(user_histories):
            if user_stats[user_id]['last_active'] < cutoff:
                del user_histories[user_id]

16. –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
async def send_template(message: Message, template_name: str):
    templates = {
        "help": "üõ† –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º...",
        "error": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞...",
    }
    await message.answer(templates.get(template_name, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω"))

17. –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å
SUPPORTED_LANGS = ['ru', 'en']
user_langs = defaultdict(lambda: 'ru')

@dp.message(Command("lang"))
async def set_language(message: Message):
    lang = message.text.split()[-1]
    if lang in SUPPORTED_LANGS:
        user_langs[message.from_user.id] = lang
        await message.answer(f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang.upper()}")

18. –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
from functools import lru_cache

@lru_cache(maxsize=100)
def cached_response(query: str) -> str:
    # –õ–æ–≥–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    return ""

19. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
async def split_long_text(text: str, max_len: int = 4000) -> List[str]:
    return [text[i:i+max_len] for i in range(0, len(text), max_len)]

20. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
async def realtime_metrics():
    return {
        "active_users": len(user_histories),
        "total_requests": sum(u['total_requests'] for u in user_stats.values())
    }

21. –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def broadcast_message(text: str):
    for user_id in user_histories:
        try:
            await bot.send_message(user_id, text)
            await asyncio.sleep(0.1)
        except:
            continue

22. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def check_content(text: str) -> bool:
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π
    return "–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç" not in text.lower()

23. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def generate_image(prompt: str):
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Stable Diffusion/DALL-E
    return "https://example.com/generated-image.png"

24. –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
async def text_to_speech(text: str):
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ
    return FSInputFile("output.mp3")

25. –†–µ–∑–µ—Ä–≤–Ω—ã–π API
async def fallback_api(messages: list):
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await start_webserver()
    asyncio.create_task(clear_user_histories())
    asyncio.create_task(backup_history())
    asyncio.create_task(clean_inactive_users())
    
    try:
        await dp.start_polling(bot, skip_updates=True)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    asyncio.run(main())
