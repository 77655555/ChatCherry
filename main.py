import os
import random
import logging
import time
import json
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiohttp import ClientSession
import asyncio

# API –∫–ª—é—á–∏ –¥–ª—è OpenRouter (—Å–∞–º—ã–µ –º–æ—â–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
keys = [
    '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',  # –ü—Ä–∏–º–µ—Ä –∫–ª—é—á–∞ 1
    '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',  # –ü—Ä–∏–º–µ—Ä –∫–ª—é—á–∞ 2
    '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',  # –ü—Ä–∏–º–µ—Ä –∫–ª—é—á–∞ 3
    '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',  # –ü—Ä–∏–º–µ—Ä –∫–ª—é—á–∞ 4
    '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',  # –ü—Ä–∏–º–µ—Ä –∫–ª—é—á–∞ 5
]

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ Telegram –±–æ—Ç–∞
TOKEN = '7560419901:AAFNKVipqHgUZIuFrN3bqPKyGDXf9r4NZAM'
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
memory = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter
async def get_openai_response(message: str, key: str):
    try:
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {key}',
        }
        payload = {
            "model": "gpt-3.5-turbo",
            "messages": [{"role": "user", "content": message}],
        }
        async with ClientSession() as session:
            async with session.post('https://openrouter.ai/api/v1/chat/completions', json=payload, headers=headers) as response:
                data = await response.json()
                if response.status == 200 and 'choices' in data:
                    return data['choices'][0]['message']['content']
                else:
                    raise Exception("Error in OpenRouter response")
    except Exception as e:
        print(f"Error in get_openai_response: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–ª—é—á–µ–π
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user_text = message.text

    # –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.answer("üéì –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_id not in memory:
        memory[user_id] = []

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
    memory[user_id].append(user_text)
    if len(memory[user_id]) > 5:  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        memory[user_id].pop(0)

    # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ (–¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π)
    current_key = random.choice(keys)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    response = await get_openai_response(user_text, current_key)

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω
    if response:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response, parse_mode=ParseMode.MARKDOWN)
    else:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á, —Ç–µ—Å—Ç–æ–≤, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –æ—Ç–≤–µ—Ç.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/reset - —Å–±—Ä–æ—Å –ø–∞–º—è—Ç–∏\n"
    )
    await message.answer(help_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /reset (—Å–±—Ä–æ—Å –ø–∞–º—è—Ç–∏)
@dp.message_handler(commands=['reset'])
async def cmd_reset(message: types.Message):
    user_id = message.from_user.id
    if user_id in memory:
        del memory[user_id]
    await message.answer("üéì –í–∞—à–∞ –ø–∞–º—è—Ç—å –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def on_start():
    print("Bot is running...")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    loop = asyncio.get_event_loop()
    loop.create_task(on_start())
    executor.start_polling(dp, skip_updates=True)
