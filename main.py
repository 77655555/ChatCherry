import os
import logging
import asyncio
import sqlite3
import random
import requests
import socket
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import openai
from io import BytesIO
import qrcode

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # –í–∞—à ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = OPENAI_API_KEY

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
DB_NAME = "bot_database.db"

def init_db():
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (id INTEGER PRIMARY KEY, username TEXT, balance INTEGER DEFAULT 100)''')
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤
        c.execute('''CREATE TABLE IF NOT EXISTS services
                     (id INTEGER PRIMARY KEY, name TEXT, url TEXT, last_status TEXT)''')
        conn.commit()

init_db()

# ===== –£–¢–ò–õ–ò–¢–´ =====
async def is_admin(update: Update):
    return update.effective_user.id == int(ADMIN_CHAT_ID)

# ===== –§–£–ù–ö–¶–ò–ò UPTIME =====
async def ping_service(url: str) -> float:
    try:
        start_time = datetime.now()
        await asyncio.wait_for(
            asyncio.get_event_loop().run_in_executor(
                None, 
                lambda: socket.create_connection((url, 80), 5)
            ), 
            timeout=5
        )
        return (datetime.now() - start_time).total_seconds() * 1000
    except:
        return -1

async def auto_monitor(context: ContextTypes.DEFAULT_TYPE):
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("SELECT url FROM services")
        services = c.fetchall()
        
        for service in services:
            latency = await ping_service(service[0])
            status = "üü¢ ONLINE" if latency != -1 else "üî¥ OFFLINE"
            
            c.execute("UPDATE services SET last_status = ? WHERE url = ?", 
                      (status, service[0]))
            
            if latency == -1:
                await context.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=f"üö® SERVICE DOWN: {service[0]}"
                )

# ===== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)",
                    (user.id, user.username))
        conn.commit()
    
    await update.message.reply_html(
        f"üöÄ –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/ping <url> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å\n"
        "/monitor_add <url> - –î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
        "/status - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n"
        "/gpt <—Ç–µ–∫—Å—Ç> - ChatGPT\n"
        "/weather <–≥–æ—Ä–æ–¥> - –ü–æ–≥–æ–¥–∞\n"
        "/qr <—Ç–µ–∫—Å—Ç> - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–∞\n"
        "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
    )

async def cmd_ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ URL: /ping google.com")
        return
    
    url = args[0]
    latency = await ping_service(url)
    
    if latency == -1:
        await update.message.reply_text(f"üî¥ {url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
    else:
        await update.message.reply_text(f"üü¢ {url} - {latency:.2f} –º—Å")

async def cmd_monitor_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /monitor_add <–∏–º—è> <url>")
        return
    
    name, url = args[0], args[1]
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute("INSERT INTO services (name, url) VALUES (?, ?)", (name, url))
        conn.commit()
    
    await update.message.reply_text(f"‚úÖ –°–µ—Ä–≤–∏—Å {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with sqlite3.connect(DB_NAME) as conn:
        c = conn.cursor()
        c.execute("SELECT name, url, last_status FROM services")
        services = c.fetchall()
    
    response = "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:\n\n" + "\n".join(
        [f"{s[0]} ({s[1]}): {s[2]}" for s in services]
    )
    await update.message.reply_text(response)

# ===== –î–û–ü. –§–£–ù–ö–¶–ò–ò =====
async def cmd_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = " ".join(context.args)
    if not prompt:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: /gpt –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –í—Å–µ–ª–µ–Ω–Ω–∞—è?")
        return
    
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        await update.message.reply_text(response.choices[0].message['content'])
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

async def cmd_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = " ".join(context.args)
    if not city:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather –ú–æ—Å–∫–≤–∞")
        return
    
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url).json()
    
    if response.get("cod") != 200:
        await update.message.reply_text("üö´ –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        weather_desc = response['weather'][0]['description'].capitalize()
        temp = response['main']['temp']
        await update.message.reply_text(
            f"üåç {city}\n"
            f"üå° {temp}¬∞C\n"
            f"‚òÅÔ∏è {weather_desc}"
        )

async def cmd_qr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: /qr Hello World")
        return
    
    img = qrcode.make(text)
    bio = BytesIO()
    img.save(bio, "PNG")
    bio.seek(0)
    
    await update.message.reply_photo(photo=InputFile(bio))

# ===== –ó–ê–ü–£–°–ö =====
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    scheduler = AsyncIOScheduler()
    scheduler.add_job(auto_monitor, 'interval', minutes=5, args=[app])
    scheduler.start()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    handlers = [
        CommandHandler("start", start),
        CommandHandler("ping", cmd_ping),
        CommandHandler("monitor_add", cmd_monitor_add),
        CommandHandler("status", cmd_status),
        CommandHandler("gpt", cmd_gpt),
        CommandHandler("weather", cmd_weather),
        CommandHandler("qr", cmd_qr),
    ]
    
    for handler in handlers:
        app.add_handler(handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
