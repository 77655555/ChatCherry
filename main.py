import os
import json
import logging
import asyncio
import fcntl
import sys
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
TELEGRAM_TOKEN = "8035488978:AAFMLVN3Ya_E4GYeWrxnKUkrAlGMirSP8gw"
API_KEYS = [
    "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",
    "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",
    "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",
    "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",
    "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"
]
MODEL = "deepseek/deepseek-r1"
ADMIN_USERNAME = "qqq5599"
FREE_MESSAGES_PER_DAY = 10
MAX_MESSAGE_LENGTH = 4096

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
user_data = {}
data_lock = asyncio.Lock()

class APIError(Exception):
    pass

def singleton_lock():
    """–ì–∞—Ä–∞–Ω—Ç–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
    try:
        lock_file = open('.bot.lock', 'w')
        fcntl.flock(lock_file, fcntl.LOCK_EX | fcntl.LOCK_NB)
        return lock_file
    except (IOError, BlockingIOError):
        logger.critical("Another instance is already running. Exiting.")
        sys.exit(1)

def process_content(content: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ç–µ–≥–æ–≤"""
    return content.replace('<think>', '').replace('</think>', '').strip()

async def reset_daily_limits(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤"""
    try:
        async with data_lock:
            logger.info("–ù–∞—á–∞–ª–æ —Å–±—Ä–æ—Å–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤...")
            
            for user_id in list(user_data.keys()):
                if user_data[user_id].get('username') != ADMIN_USERNAME:
                    user_data[user_id]['messages_today'] = 0
            
            logger.info("–î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤: {str(e)}")

async def call_openrouter_api(prompt: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ API —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π"""
    for api_key in API_KEYS:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers={
                        "Authorization": f"Bearer {api_key}",
                        "HTTP-Referer": "https://github.com/your-repository",
                        "X-Title": "Telegram Bot"
                    },
                    json={
                        "model": MODEL,
                        "messages": [{"role": "user", "content": prompt}],
                        "temperature": 0.7
                    },
                    timeout=60
                ) as response:
                    if response.status == 401:
                        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á: {api_key[:8]}...")
                        continue
                    
                    if response.status != 200:
                        error = await response.json()
                        logger.error(f"–û—à–∏–±–∫–∞ API {response.status}: {error.get('error', {})}")
                        continue
                    
                    result = await response.json()
                    return process_content(result['choices'][0]['message']['content'])
                    
        except (aiohttp.ClientError, asyncio.TimeoutError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
            continue
        except json.JSONDecodeError:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API")
            continue
    
    raise APIError("–í—Å–µ API –∫–ª—é—á–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

async def check_user_limit(user_id: int, username: str) -> bool:
    """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤"""
    async with data_lock:
        if username == ADMIN_USERNAME:
            return True

        if user_id not in user_data:
            user_data[user_id] = {
                'messages_today': 0,
                'username': username
            }
        
        if user_data[user_id]['messages_today'] >= FREE_MESSAGES_PER_DAY:
            return False
        
        user_data[user_id]['messages_today'] += 1
        return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø DeepSeek R1 –±–æ—Ç.\n\n"
        "–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—á—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.\n\n"
        f"üîπ –£ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å {FREE_MESSAGES_PER_DAY} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.\n"
        f"üîπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{ADMIN_USERNAME} –∏–º–µ–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É!"
    )
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
        "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        f"–õ–∏–º–∏—Ç—ã: {FREE_MESSAGES_PER_DAY} —Å–æ–æ–±—â–µ–Ω–∏–π/–¥–µ–Ω—å\n"
        f"–ê–¥–º–∏–Ω: @{ADMIN_USERNAME}"
    )
    await update.message.reply_text(help_text)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
    user = update.effective_user
    async with data_lock:
        if user.username == ADMIN_USERNAME:
            status_text = "üî∞ –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø)"
        else:
            user_info = user_data.get(user.id, {'messages_today': 0})
            remaining = max(0, FREE_MESSAGES_PER_DAY - user_info['messages_today'])
            current_time = datetime.now()
            reset_time = current_time.replace(hour=23, minute=59, second=59)
            hours_left = (reset_time - current_time).seconds // 3600
            
            status_text = (
                f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_info['messages_today']}/{FREE_MESSAGES_PER_DAY}\n"
                f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å: {remaining}\n"
                f"‚è≥ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ —á–µ—Ä–µ–∑: {hours_left} —á."
            )
    
    await update.message.reply_text(status_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    if not user or not user.username:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return

    try:
        if not await check_user_limit(user.id, user.username):
            current_hour = datetime.now().hour
            await update.message.reply_text(
                f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω! –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ {24 - current_hour} —á.\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç: @{ADMIN_USERNAME}"
            )
            return

        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, 
            action='typing'
        )

        response = await call_openrouter_api(update.message.text)
        
        for i in range(0, len(response), MAX_MESSAGE_LENGTH):
            await update.message.reply_text(response[i:i+MAX_MESSAGE_LENGTH])
            
    except APIError as e:
        logger.error(f"API Error: {str(e)}")
        await update.message.reply_text("üöß –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    error = context.error
    if isinstance(error, Exception):
        if 'Conflict' in str(error):
            logger.critical("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            sys.exit(1)
    
    logger.error(f"–û—à–∏–±–∫–∞: {str(error)}", exc_info=True)
    if update and update.effective_message:
        await update.effective_message.reply_text("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ì–∞—Ä–∞–Ω—Ç–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    lock_file = singleton_lock()
    
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers = [
            CommandHandler("start", start),
            CommandHandler("help", help_command),
            CommandHandler("status", status),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ]
        
        for handler in handlers:
            application.add_handler(handler)
        
        application.add_error_handler(error_handler)
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –≤ 00:00
        application.job_queue.run_daily(
            reset_daily_limits,
            time=datetime.strptime("00:00", "%H:%M").time(),
            days=(0, 1, 2, 3, 4, 5, 6)
        )
        
        # –î–ª—è Render
        if 'RENDER' in os.environ:
            application.run_webhook(
                listen="0.0.0.0",
                port=int(os.environ.get('PORT', 10000)),
                secret_token='WEBHOOK_SECRET',
                webhook_url=os.environ.get('WEBHOOK_URL')
            )
        else:
            application.run_polling(
                drop_pending_updates=True,
                close_loop=False,
                stop_signals=[]
            )
            
    finally:
        fcntl.flock(lock_file, fcntl.LOCK_UN)
        lock_file.close()

if __name__ == "__main__":
    main()
