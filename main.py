import os
import json
import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
TELEGRAM_TOKEN = "8035488978:AAFMLVN3Ya_E4GYeWrxnKUkrAlGMirSP8gw"
API_KEYS = [
    "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",
    "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",
    "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",
    "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",
    "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"
]
MODEL = "deepseek/deepseek-r1"
ADMIN_USERNAME = "qqq5599"
FREE_MESSAGES_PER_DAY = 10
MAX_MESSAGE_LENGTH = 4096

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
user_data = {}
data_lock = asyncio.Lock()

class APIError(Exception):
    pass

def process_content(content: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ç–µ–≥–æ–≤"""
    return content.replace('<think>', '').replace('</think>', '').strip()

async def reset_daily_limits():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤"""
    while True:
        now = datetime.now()
        midnight = (now + timedelta(days=1)).replace(
            hour=0, minute=0, second=0, microsecond=0
        )
        await asyncio.sleep((midnight - now).total_seconds())
        
        async with data_lock:
            for user_id in list(user_data.keys()):
                if user_data[user_id].get('username') != ADMIN_USERNAME:
                    user_data[user_id]['messages_today'] = 0
        logger.info("–î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã")

async def call_openrouter_api(prompt: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ API —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π"""
    for api_key in API_KEYS:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers={"Authorization": f"Bearer {api_key}"},
                    json={
                        "model": MODEL,
                        "messages": [{"role": "user", "content": prompt}],
                        "temperature": 0.7
                    },
                    timeout=60
                ) as response:
                    if response.status != 200:
                        error = await response.json()
                        logger.error(f"–û—à–∏–±–∫–∞ API {response.status}: {error.get('error', {})}")
                        continue
                    
                    result = await response.json()
                    return process_content(result['choices'][0]['message']['content'])
                    
        except (aiohttp.ClientError, asyncio.TimeoutError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
            continue
        except json.JSONDecodeError:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API")
            continue
    
    raise APIError("–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")

async def check_user_limit(user_id: int, username: str) -> bool:
    """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤"""
    async with data_lock:
        if username == ADMIN_USERNAME:
            return True

        if user_id not in user_data:
            user_data[user_id] = {
                'messages_today': 0,
                'username': username
            }
        
        if user_data[user_id]['messages_today'] >= FREE_MESSAGES_PER_DAY:
            return False
        
        user_data[user_id]['messages_today'] += 1
        return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø DeepSeek R1 –±–æ—Ç.\n\n"
        "–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—á—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.\n\n"
        f"üîπ –£ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å {FREE_MESSAGES_PER_DAY} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.\n"
        f"üîπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{ADMIN_USERNAME} –∏–º–µ–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É!"
    )
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
        "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        f"–õ–∏–º–∏—Ç—ã: {FREE_MESSAGES_PER_DAY} —Å–æ–æ–±—â–µ–Ω–∏–π/–¥–µ–Ω—å\n"
        f"–ê–¥–º–∏–Ω: @{ADMIN_USERNAME}"
    )
    await update.message.reply_text(help_text)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
    user = update.effective_user
    async with data_lock:
        if user.username == ADMIN_USERNAME:
            status_text = "üî∞ –°—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø)"
        else:
            user_info = user_data.get(user.id, {'messages_today': 0})
            remaining = max(0, FREE_MESSAGES_PER_DAY - user_info['messages_today'])
            status_text = (
                f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_info['messages_today']}/{FREE_MESSAGES_PER_DAY}\n"
                f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å: {remaining}\n"
                "‚è≥ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ —á–µ—Ä–µ–∑: "
                f"{(datetime.now().replace(hour=23, minute=59, second=59) - datetime.now()).seconds // 3600} —á."
            )
    
    await update.message.reply_text(status_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    if not user or not user.username:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if not await check_user_limit(user.id, user.username):
            await update.message.reply_text(
                f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω! –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ {24 - datetime.now().hour} —á.\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç: @{ADMIN_USERNAME}"
            )
            return

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, 
            action='typing'
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        response = await call_openrouter_api(update.message.text)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
        for i in range(0, len(response), MAX_MESSAGE_LENGTH):
            await update.message.reply_text(response[i:i+MAX_MESSAGE_LENGTH])
            
    except APIError as e:
        logger.error(f"API Error: {str(e)}")
        await update.message.reply_text("üöß –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {update}: {context.error}")
    if update.effective_message:
        await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

def main():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = [
        CommandHandler("start", start),
        CommandHandler("help", help_command),
        CommandHandler("status", status),
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    ]
    
    for handler in handlers:
        application.add_handler(handler)
    
    application.add_error_handler(error_handler)
    application.create_task(reset_daily_limits())
    application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
