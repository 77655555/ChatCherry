# bot.py - Full Telegram Bot with OpenRouter AI Integration

import os
import asyncio
import logging
from datetime import datetime, timedelta
import json
from typing import Dict, Any, List

import dotenv
import aiofiles
import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, 
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENROUTER_API_KEYS = os.getenv('OPENROUTER_API_KEYS', '').split(',')
DAILY_MESSAGE_LIMIT = int(os.getenv('DAILY_MESSAGE_LIMIT', 50))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class UserStates(StatesGroup):
    waiting_for_input = State()

class TelegramAIBot:
    def __init__(self, bot_token: str, openrouter_keys: List[str]):
        self.bot = Bot(token=bot_token)
        self.dp = Dispatcher()
        self.openrouter_keys = openrouter_keys
        self.current_key_index = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â
        self.user_messages = {}
        self.user_daily_messages = {}

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        self.register_handlers()

    def register_handlers(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.dp.message(Command("start"))(self.handle_start)
        self.dp.message(Command("help"))(self.handle_help)
        self.dp.message(Command("reset"))(self.handle_reset)
        self.dp.message(Command("menu"))(self.handle_menu)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message(F.text)(self.handle_text_message)
        self.dp.message(F.document)(self.handle_document)
        self.dp.message(F.voice)(self.handle_voice)

    async def handle_start(self, message: Message):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        keyboard = ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üìù –ù–∞—á–∞—Ç—å —á–∞—Ç")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ], resize_keyboard=True)
        
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø AI-–±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OpenRouter. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º.",
            reply_markup=keyboard
        )

    async def handle_help(self, message: Message):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        help_text = """
ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:
‚Ä¢ /start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ /reset - –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
‚Ä¢ /menu - –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é

–Ø –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
"""
        await message.answer(help_text)

    async def handle_reset(self, message: Message):
        # –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        if user_id in self.user_messages:
            del self.user_messages[user_id]
        await message.answer("üîÑ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

    async def handle_menu(self, message: Message):
        # –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü§ñ –û –±–æ—Ç–µ", callback_data="about")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ])
        await message.answer("–ú–µ–Ω—é:", reply_markup=keyboard)

    async def handle_text_message(self, message: Message):
        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if not self.check_daily_limit(user_id):
            await message.answer("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        # –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏
        await self.bot.send_chat_action(message.chat.id, "typing")

        # –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å OpenRouter AI
        try:
            response = await self.get_ai_response(user_id, message.text)
            await message.reply(response, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_document(self, message: Message):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        user_id = message.from_user.id
        
        if not self.check_daily_limit(user_id):
            await message.answer("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        try:
            file = await self.bot.get_file(message.document.file_id)
            file_path = file.file_path
            
            async with aiohttp.ClientSession() as session:
                async with session.get(f'https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}') as response:
                    content = await response.read()
                    text_content = content.decode('utf-8', errors='ignore')[:4000]
            
            await self.bot.send_chat_action(message.chat.id, "typing")
            response = await self.get_ai_response(user_id, f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {text_content}")
            await message.reply(response, parse_mode="Markdown")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.")

    async def handle_voice(self, message: Message):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        user_id = message.from_user.id
        
        if not self.check_daily_limit(user_id):
            await message.answer("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return

        try:
            file = await self.bot.get_file(message.voice.file_id)
            file_path = file.file_path
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            transcription = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
            
            await self.bot.send_chat_action(message.chat.id, "typing")
            response = await self.get_ai_response(user_id, transcription)
            await message.reply(response, parse_mode="Markdown")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
            await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    async def get_ai_response(self, user_id: int, message_text: str) -> str:
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
        if user_id not in self.user_messages:
            self.user_messages[user_id] = []
        
        self.user_messages[user_id].append({"role": "user", "content": message_text})
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        self.clean_message_history(user_id)

        messages = self.user_messages[user_id][-10:]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π

        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–±–æ—Ä API-–∫–ª—é—á–µ–π
        for _ in range(len(self.openrouter_keys)):
            try:
                async with aiohttp.ClientSession() as session:
                    payload = {
                        "model": "openai/gpt-3.5-turbo",
                        "messages": messages
                    }
                    headers = {
                        "Authorization": f"Bearer {self.openrouter_keys[self.current_key_index]}",
                        "Content-Type": "application/json"
                    }
                    
                    async with session.post(
                        "https://openrouter.ai/api/v1/chat/completions", 
                        json=payload, 
                        headers=headers
                    ) as response:
                        if response.status == 200:
                            result = await response.json()
                            response_text = result['choices'][0]['message']['content']
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                            self.user_messages[user_id].append({
                                "role": "assistant", 
                                "content": response_text
                            })
                            
                            return response_text
                        
                        elif response.status == 429:
                            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                            self.current_key_index = (self.current_key_index + 1) % len(self.openrouter_keys)
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ OpenRouter: {await response.text()}")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {e}")
                self.current_key_index = (self.current_key_index + 1) % len(self.openrouter_keys)
        
        return "üö´ –í—Å–µ API-–∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def check_daily_limit(self, user_id: int) -> bool:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        current_time = datetime.now()
        
        if user_id not in self.user_daily_messages:
            self.user_daily_messages[user_id] = {
                'count': 1,
                'timestamp': current_time
            }
            return True
        
        user_data = self.user_daily_messages[user_id]
        time_diff = current_time - user_data['timestamp']
        
        if time_diff > timedelta(days=1):
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ 24 —á–∞—Å–æ–≤
            user_data['count'] = 1
            user_data['timestamp'] = current_time
            return True
        
        if user_data['count'] < DAILY_MESSAGE_LIMIT:
            user_data['count'] += 1
            return True
        
        return False

    def clean_message_history(self, user_id: int):
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        current_time = datetime.now()
        
        if user_id in self.user_messages:
            self.user_messages[user_id] = [
                msg for msg in self.user_messages[user_id] 
                if (current_time - datetime.fromtimestamp(msg.get('timestamp', current_time.timestamp()))) 
                   < timedelta(hours=24)
            ]
            
            if len(self.user_messages[user_id]) > 50:
                self.user_messages[user_id] = self.user_messages[user_id][-50:]

    async def start_bot(self):
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

async def main():
    bot = TelegramAIBot(TELEGRAM_BOT_TOKEN, OPENROUTER_API_KEYS)
    await bot.start_bot()

if __name__ == '__main__':
    asyncio.run(main())
